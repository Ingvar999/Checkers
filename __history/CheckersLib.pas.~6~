unit CheckersLib;

interface

uses
   Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
   Dialogs, ExtCtrls, StdCtrls, Menus;

type
   TSavedGame = record
      boardS: TBoard;
      beatS: boolean;
      lastAlphaS, numberS: shortint;
   end;
   TBoard = array[0..7] of array[0..7] of byte;
   TMove = record
      x1, y1, x2, y2: byte;
   end;
   TMoves =  array of TMove;
   TTeam = array[0..11] of TImage;

procedure Delay(dwMilliseconds: word);
function CheckGameOverTeam(const badge: byte; const board: TBoard): boolean;
function SeekChecker(const x, y: byte; const Team: TTeam): byte;
procedure SeekVictim(const x1, y1, x2, y2, pas: byte; const board: TBoard;
var betweenx, betweeny: byte);
function Alpha(const board1: TBoard): shortint;
procedure GenerateMoves(var board1: TBoard; const act, pas: byte;
var k, a: shortint; var moves: TMoves; const beat: boolean);
procedure VariantBeatKingComp(const i, j, pas, i0, j0: smallint; const board1: TBoard;
var k: shortint; var moves: TMoves);
procedure VariantBeatComp(const i, j, pas, i0, j0: smallint; const board1: TBoard;
 var k: shortint; var moves: TMoves);
procedure VariantMoveComp(const x, y, x0, y0: smallint; const board1: TBoard;
var k: shortint; var moves: TMoves);

implementation

//провер€ет одно направление дамки на возможность хода при просчитывании
procedure VariantMoveComp(const x, y, x0, y0: smallint; const board1: TBoard;
var k: shortint; var moves: TMoves);
var
   x1, y1: byte;
begin
   x1 := x + x0;
   y1 := y + Y0;
   while (x1 <= 7) and (x1 >= 0) and (y1 <= 7) and (y1 >= 0) and (board1[y1, x1] = 0) do
   begin
      inc(k);
      SetLength(moves, k);
      moves[k - 1].x1 := x;
      moves[k - 1].y1 := y;
      moves[k - 1].x2 := x1;
      moves[k - 1].y2 := y1;
      x1 := x1 + x0;
      y1 := y1 + Y0;
   end;
end;

//провер€ет одно направление шашки на возможность вз€ти€ при просчитывании
procedure VariantBeatComp(const i, j, pas, i0, j0: smallint; const board1: TBoard;
 var k: shortint; var moves: TMoves);
begin
   if (i + 2 * i0 <= 7) and (i + 2 * i0 >= 0) and (j + 2 * j0 <= 7) and
    (j + 2 * j0 >= 0) and ((board1[i + i0, j + j0] = pas) or
    (board1[i + i0, j + j0] = pas + 4)) and (board1[i + 2 * i0, j + 2 * j0] = 0) then
   begin
      inc(k);
      SetLength(moves, k);
      moves[k - 1].x1 := j;
      moves[k - 1].y1 := i;
      moves[k - 1].x2 := j + 2 * j0;
      moves[k - 1].y2 := i + 2 * i0;
   end;
end;

//провер€ет одно направление дамки на возможность вз€ти€ при просчитывании
procedure VariantBeatKingComp(const i, j, pas, i0, j0: smallint; const board1: TBoard;
var k: shortint; var moves: TMoves);
var
   i1, j1: byte;
begin
   if (i + i0 >= 0) and (i + i0 <= 7) and (j + j0 <= 7) and (j + j0 >= 0) then
   begin
      i1 := i + i0;
      j1 := j + j0;
      while (i1 > 0) and (i1 < 7) and (j1 < 7) and (j1 > 0) and (board1[i1, j1] = 0) do
      begin
         i1 := i1 + i0;
         j1 := j1 + j0;
      end;
      if (board1[i1, j1] = pas) or (board1[i1, j1] = pas + 4) then
      begin
         i1 := i1 + i0;
         j1 := j1 + j0;
         while (i1 >= 0) and (i1 <= 7) and (j1 <= 7) and (j1 >= 0) and (board1[i1, j1] = 0) do
         begin
            inc(k);
            SetLength(moves, k);
            moves[k - 1].x1 := j;
            moves[k - 1].y1 := i;
            moves[k - 1].x2 := j1;
            moves[k - 1].y2 := i1;
            i1 := i1 + i0;
            j1 := j1 + j0;
         end;
      end;
   end;
end;

// «аписывает все возможные ходы одной из сторон в moves
procedure GenerateMoves(var board1: TBoard; const act, pas: byte;
var k, a: shortint; var moves: TMoves; const beat: boolean);
var
   i, j: byte;
begin
   if not beat then
      for i := 0 to 7 do
         for j := 0 to 7 do
         begin
            if board1[i, j] = act then
            begin
               if (j > 0) and (board1[i + a, j - 1] = 0) then
               begin
                  inc(k);
                  SetLength(moves, k);
                  moves[k - 1].x1 := j;
                  moves[k - 1].y1 := i;
                  moves[k - 1].x2 := j - 1;
                  moves[k - 1].y2 := i + a;
               end;
               if (j < 7)  and (board1[i + a, j + 1] = 0) then
               begin
                  inc(k);
                  SetLength(moves, k);
                  moves[k - 1].x1 := j;
                  moves[k - 1].y1 := i;
                  moves[k - 1].x2 := j + 1;
                  moves[k - 1].y2 := i + a;
               end;
            end
            else
            if board1[i, j] = act + 4 then
            begin
               VariantMoveComp(j, i, -1, -1, board1, k, moves);
               VariantMoveComp(j, i, -1, 1, board1, k, moves);
               VariantMoveComp(j, i, 1, -1, board1, k, moves);
               VariantMoveComp(j, i, 1, 1, board1, k, moves);
            end;
         end
   else
      for i := 0 to 7 do
         for j := 0 to 7 do
            if board1[i, j] = act + 2 then
            begin
               VariantBeatComp(i, j, pas, -1, -1, board1, k, moves);
               VariantBeatComp(i, j, pas, -1, 1, board1, k, moves);
               VariantBeatComp(i, j, pas, 1, -1, board1, k, moves);
               VariantBeatComp(i, j, pas, 1, 1, board1, k, moves);
               board1[i, j] := act;
            end
            else
            if board1[i, j] = act + 6 then
            begin
               VariantBeatKingComp(i, j, pas, -1, -1, board1, k, moves);
               VariantBeatKingComp(i, j, pas, -1, 1, board1, k, moves);
               VariantBeatKingComp(i, j, pas, 1, -1, board1, k, moves);
               VariantBeatKingComp(i, j, pas, 1, 1, board1, k, moves);
               board1[i, j] := act + 4;
            end;
end;

 //¬озвращает оценку положени€ (дл€ белых)
function Alpha(const board1: TBoard): shortint;
var
   i, j: byte;
begin
   result := 0;
   for i := 0 to 7 do
      for j := 0 to 7 do
         case board1[i, j] of
            1: inc(result);
            5: result := result + 3;
            2: dec(result);
            6: result := result - 3;
         end;
end;

 // ¬озвращает зан€тую позицию шашкой между x1 y1 и x2 y2
procedure SeekVictim(const x1, y1, x2, y2, pas: byte; const board: TBoard;
var betweenx, betweeny: byte);
var
   a, b: shortint;
begin
   betweenx := x1;
   betweeny := y1;
   if (x2 - x1) > 0 then
      a := 1
   else
      a := -1;
   if (y2 - y1) > 0 then
      b := 1
   else
      b := -1;
   while  (board[betweeny, betweenx] <> pas)
   and (board[betweeny, betweenx] <> pas + 4) do
   begin
      betweenx := betweenx + a;
      betweeny := betweeny + b;
   end;
end;

   // ¬озвращает индекс объекта на позиции  x y
function SeekChecker(const x, y: byte; const Team: TTeam): byte;
begin
   result := 0;
   while ((Team[result] as TImage) = nil) or ((Team[result] as TImage).Top <> Y * 70 + 30)
    or ((Team[result] as TImage).Left <> x * 70 + 30) do
      inc(result);
end;

//задержка
procedure Delay(dwMilliseconds: word);
var
   iStart, iStop: DWORD;
begin
   iStart := GetTickCount;
   repeat
      iStop := GetTickCount;
      Application.ProcessMessages;
   until (iStop - iStart) >= dwMilliseconds;
end;

//проверка на отсутствие ходов у одного из игроков
function CheckGameOverTeam(const badge: byte; const board: TBoard): boolean;
var
   i, j: byte;
   a: shortint;
begin
   if badge = 1 then
      a := -1
   else
      a := 1;
   result := true;
   i := 0;
   while (i < 8) and result do
   begin
      j := 0;
      while (j < 8) and result do
      begin
         if (board[i, j] = badge) then
         begin
            if (j > 0) and (board[i + a, j - 1] = 0) then
               result := false;
            if (j < 7) and (board[i + a, j + 1] = 0) then
               result := false;
         end
         else
         if (board[i, j] = badge + 4) then
            result := false;
         inc(j);
      end;
      inc(i);
   end;
end;

end.